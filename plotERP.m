% plotERP() - plot ERP: 1 or several condition
%
% Usage: [AllERP,order,max50] = plotERP(EEG,varargin)
%
% Requierd input:     meaning (size or options) {default}
%
%   EEG             = EEGlab structure
%
%
% Optional input:     meaning (size or options) {default}
%   plotVar         = variable to plot
%                       - {ERP}     : mean over trials
%                       - energyCum : cumsum(ERP^2)./sum(ERP)
%                       - bands     : hilbert transfom of different brain oscillation
%   experiment             = structure de type experiment generated by generate experimentriment used for contrasting
%                     severeal regressors( conditions)
%   plotMax         = plot maximum and latency of the maximum {'off'};
%   timeInter       = interval of time compute pic {[0,120]}
%   allElec         = plot all the elec on the same graph to compare pic latency {'off'};
%   oneGraphByArea  = plot all the electrode of the same area one different graph;
%   oneColorByArea  = plot all the electrode of the same area one the same graph but with different colors;
%   allTrials       = instead of ERP plot all the trials{'off'}
%   timePlot        = to plot only one part of the signal
%   stat            = plot significant period (by an anova) on the absciss axis {'off'}
%   col             = scale of color to use {colormap(jet)}
%   save            = if name of a directory save figure in ./results/figure/ERP/condition {''}
%   legende         = when several condition add a legende {'off'}
%   labels          = plot labels of electrodes on the ERP
%
% Outputs:            meaning (size or options)
%
%   AllERP          = matrice of all the ERP (elec*times)
%   order           = vector of channel order in AllERP, if EEG.chanlocs.area exist electrodes are
%                     ordered by areas
%   max50           = time at witch the NRJ reach 50% of the maximum on the considered timeInter
%
% Autors: Maxime, Serre Lab, 2010
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


function [AllERP,order,max50] = plotERP(EEG,varargin)

%-----------------------------------------
if nargin<0
    error('plotERP requier an EEG structure')
end

defaults.plotVar        = 'ERP';
defaults.baseline       = [];
defaults.experiment     = '';
defaults.plotMax        = 'off';
defaults.timeInter      = [];
defaults.allElec        = 'off';
defaults.oneGraphByArea = 'off';
defaults.oneColorByArea = 'off';
defaults.allTrials      = 'off';
defaults.timePlot       = [];
defaults.stat           = 'off';
defaults.col            = colormap(HSV);;
defaults.save           = '';
defaults.legende        = 'off';
defaults.labels         = 'off';



args             = propval(varargin,defaults);

plotVar          = args.plotVar;
baseline         = args.baseline;
experiment       = args.experiment;
plotMax          = args.plotMax;
timeInter        = args.timeInter;
allElec          = args.allElec;
oneGraphByArea   = args.oneGraphByArea;
oneColorByArea   = args.oneColorByArea;
allTrials        = args.allTrials;
timePlot         = args.timePlot;
stat             = args.stat;
col              = args.col;
save             = args.save;
legende          = args.legende;
labels           = args.labels;


%-----------------------------------------
% OutPut %
%--------%
AllERP = [];
order  = [];
max50  = [];

%-----------------%
% Remove Baseline %
%-----------------%
if length(baseline)>1
    EEG = pop_rmbase(EEG, baseline);
end


%-----------------------%
% Time working interval %
%-----------------------%
if length(timeInter)>1
    indt1     = max(find(EEG.times<=timeInter(1)));
    indt2     = min(find(EEG.times>=timeInter(2)));
    t1        = EEG.times(indt1);
    t2        = EEG.times(indt2);
    timeInter = [t1,t2];
else
    indt1 = 1;
    indt2 = EEG.pnts;
end

%-----------------------------------------------------------------------------%
% if several condition to compare coded by regressors from generateExperiment %
%-----------------------------------------------------------------------------%
if ~strcmp(experiment,'')
    if strcmp(experiment.filename,EEG.filename)&isfield(experiment,'regressors')
        cat   = unique (experiment.regressors);
        nbCat = length (cat);
        % For color
        b   = floor(size(col,1)/(nbCat+1));
    else
        error('filename doesnt match or no regressors')
    end
else
    nbCat = 1;
    b     = 1;
end

%---------------%
% Select trials %
%---------------%

if isfield(experiment,'relevantTrials')
    experiment.regressors     = experiment.regressors(experiment.relevantTrials);
else
    experiment.relevantTrials = 1:size(EEG.data,3);
end

%--------------%
% Sort by area %
%--------------%

if isfield(EEG.chanlocs,'area')
    revAr  = {'v2','v4','pit','unc'};
    elec   = [EEG.chanlocs.area];
    areas  = unique(elec);
    areas  = intersect(areas,revAr);
    or    = [];
    order = [];
    el    = 1 :length(elec);
    for ar=1:length(areas)
        or(strcmp(elec,areas{ar})) = ar;
    end
    for ar=1:length(areas)
        order = [order, el(or==ar)];
    end
else
    order = 1:EEG.nbchan;
end

%----------------------------%
% Options for ploting design %
%----------------------------%
if strcmp (allElec,'on')&strcmp(oneGraphByArea,'off')&strcmp(oneColorByArea,'off')
    figure;
    decalage = 150 ;
elseif strcmp (allElec,'on')&strcmp(oneGraphByArea,'on')
    figure;
    decalage = 0 ;
elseif strcmp (allElec,'on')&strcmp(oneColorByArea,'on')
%    figure;
    decalage = 150 ;
    n        = 1 ;
end

% Loop over electrodes
%---------------------
for i=1:length(order)
    if strcmp (allElec,'off')&strcmp(oneColorByArea,'off')
        figure;
        decalage = 0 ;
    end
    %Loop over conditions
    %--------------------
    for ca=1:nbCat
        if isfield(experiment,'regressors')
            if strcmp(experiment.filename,EEG.filename)
                indCat = find(experiment.regressors == ca-1);
            else
                error('filename doesnt match or no regressors')
            end
        else
            indCat = 1:size(EEG.data,3);
        end
        
        %---------------------------%
        % Compute ploting variables %
        %---------------------------%
        if strcmp(plotVar,'ERP')
            ERP = squeeze(mean(EEG.data(order(i),indt1:indt2,indCat),3))+decalage*(i-1);
            SD  = squeeze(std(EEG.data(order(i),indt1:indt2,indCat),[],3))/sqrt(length(indCat));
            % Max
            %----
                        ind2max     = max(find(EEG.times<=120));

            [Max,inLat] = max(abs(ERP(1:ind2max-indt1)-decalage*(i-1)));
            indMax      = indt1+inLat-1;
            latMax        = EEG.times(indMax);
        elseif strcmp(plotVar,'energyCum')
            ERP     = squeeze(mean(EEG.data(order(i),:,indCat),3))+decalage*(i-1);
            NRJ     = cumsum(ERP(indt1:indt2).^2)./repmat(sum(ERP(indt1:indt2).^2,2),1,size(ERP(indt1:indt2),2));
            ERP     = NRJ;%detrend(NRJ,'linear',30);
            
            % Max
            %----
            ma      = find(NRJ>0.5);
            latMax    = EEG.times(indt1+ma(1));
        elseif strcmp(plotVar,'bands')
            ERP = squeeze(mean(EEG.featClassif.pow.delta(order(i),indt1:indt2,indCat),3))+decalage*(i-1);
            SD  = squeeze(std(EEG.featClassif.pow.delta(order(i),indt1:indt2,indCat),[],3))/sqrt(length(indCat));
            % Max
            %----
            ind2max     = max(find(EEG.times<=120));
            [Max,inLat] = max(abs(ERP(1:ind2max-indt1)-decalage*(i-1)));
            indMax      = indt1+inLat-1;
            latMax      = EEG.times(indMax);
        end
        
        max50   = [max50 latMax];
        AllERP = [AllERP; ERP];
        
        %------%
        % Plot %
        %------%
        % To have OneColorByArea
        %-----------------------
        if strcmp(oneColorByArea,'on')
            ca = n;
        end
        % ESM
        %-----
        if strcmp(oneColorByArea,'off')&strcmp(allTrials,'off')&strcmp(oneGraphByArea,'off')
            fill([EEG.times,EEG.times(end:-1:1)],[ERP-SD,ERP(end:-1:1)+SD(end:-1:1)],col(ca*b,:)), hold on;
            alpha(0.2)
        end
        
        if strcmp(oneColorByArea,'on')|strcmp(oneGraphByArea,'on')
            lw = 1.5;
            % To plot unc
%             if ca == length(revAr)
%                 lw = 0.5;
%             end
        else
            lw = 2;
        end
        
        if strcmp(allTrials,'off')
            % Plot ERP
            %---------
            plot(EEG.times(indt1:indt2),ERP,'Color',col(ca*b,:),'LineWidth',lw); hold on
            
        else
            % Plot allTrials instead of ERP
            %------------------------------
            plot(EEG.times,squeeze(EEG.data(order(i),:,:)),'Color',col(ca*b,:),'LineWidth',0.01)
            legend(num2str(size(EEG.data,3)))
        end
        %---------%
        % legende %
        %---------%
        if strcmp(legende,'on')
            if nbCat>1
                if ca==1
                    xli = xlim;
                    yli = ylim;
                end
                text(xli(1)+(xli(2)-xli(1))/20*ca,yli(1)+yli(2)-yli(1)/20,num2str(cat(ca)),'Color',col(ca*b,:),'FontSize',15);
            end
        end
    end
    
    % Plot axis labels
    %-----------------
    xlabel('Time (ms)')
    ylabel('Potentiel(microV)')
    % Title
    %-------
    if isfield(EEG.chanlocs,'labels')
        title([EEG.chanlocs.labels(order(i)),num2str(max5)])
        % When some channels has been removed and labels of remaining channels are in urchanlocs
        % (leuven)
    elseif length(EEG.urchanlocs)>2
        title(['Elec' num2str(EEG.urchanlocs(order(i)))])
    else
        title(['Elec' num2str(order(i))])
    end
    
    
    %------------%
    % Statistics %
    %------------%
    
    if nbCat>1 & strcmp(stat,'on')
        if strcmp(plotVar,'ERP')
            for ti = 1: EEG.pnts
                p(ti) = anova1(squeeze(EEG.data(i,ti,experiment.relevantTrials))',experiment.regressors);
            end
        elseif strcmp(plotVar,'bands')
            for ti = 1: EEG.pnts
                p(ti) = anova1(squeeze(EEG.featClassif.pow.delta(i,ti,experiment.relevantTrials))',experiment.regressors);
            end
        end
        
        % Plot Stat
        %----------
        yli = ylim;
        plot(EEG.times(p<0.05),repmat(yli(1),length(EEG.times(p<0.05)),1),'ks','MarkerEdgeColor','k','MarkerFaceColor','k', 'MarkerSize',5)
    end
    
    %---------%
    % PlotMax %
    %---------%
    
    
    if strcmp(plotMax,'on')
        % Plot a cross
        %-------------
        
        %Vertical
        plot(repmat(latMax,1,2),[ERP(inLat)-20,ERP(inLat)+20],'k','LineWidth',0.1)
        %Horizontal
        plot(latMax-5:latMax+5,repmat(ERP(inLat),1,11),'k','LineWidth',0.1)
        text(latMax + 6, double(ERP(inLat) + 2),[num2str(latMax)],'Color',[0,0,0],'FontSize',8)%num2str(round(Max)) '*10^-6 V at ' ; col(ca,:)
        
        % label area
        %-----------
        text(timeInter(1),decalage*(i-1),[ num2str(order(i))])% ': ' EEG.chanlocs.area{order(i)}])
        
    end
    
    %---------------------------------------------%
    % Plot one graph by area or one color by area %
    %---------------------------------------------%
    % Labels of electrodes
    %----------------------
    if strcmp(oneColorByArea,'on')&strcmp(labels,'on')
        xli = xlim;
        yli = ylim;        
        y = yli(1)+((yli(2)-yli(1))/size(EEG.data,1))*i;
        x = find(ERP<y);
        if length(x)<2
            x = xli(2);
        end
        text(EEG.times(indt1+max(x)),y,EEG.chanlocs.labels{order(i)},'Color',col(n*b,:));      
    end

    if i<length(order)
        if strcmp(oneGraphByArea,'on')&~strcmp(EEG.chanlocs.area{order(i)},EEG.chanlocs.area{order(i+1)})
            title(EEG.chanlocs.area{order(i)});
            figure
        elseif strcmp(oneColorByArea,'on')&~strcmp(EEG.chanlocs.area{order(i)},EEG.chanlocs.area{order(i+1)})
            % Shift of color
            %---------------
            b   = floor(size(col,1)/(length(areas)+1));
            n   = n+1;
        end
    else
        if strcmp(oneGraphByArea,'on')
            title(EEG.chanlocs.area{order(i)})
        end
    end
    
    %--------------------------------%
    % Show only one part of the plot %
    %--------------------------------%
    if length(timePlot)>0
        xlim(timePlot);
    end
    
    %------%
    % Save %
    %------%
    
    if ~strcmp(save,'')
        dir_out = [save,'results/figure/ERP/numOfFoci/'];
        if i == 1
            mkdir(dir_out)
        end
        
        %---------------%
        % export figure %
        %---------------%
        %set(gca,'FontSize',13)
        set(gca,'box','off');
        %         set(gcf,'PaperUnits', 'centimeters');
        %         set(gcf,'PaperPosition',[0 0 30 20]);
        %         set(gcf,'PaperType','A4');
        % When some channels has been removed and labels of remaining channels are in urchanlocs
        % (leuven)
        if length(EEG.urchanlocs)>2
            print( gcf, '-dpdf', [dir_out 'Elec' num2str(EEG.urchanlocs(order(i))) '.pdf']);
            
        else
            print( gcf, '-dpdf', [dir_out 'Elec' num2str(order(i)) '.pdf']);
        end
    end
    pause
    %delete(gcf)
end


